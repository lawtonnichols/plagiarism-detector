package fett.listeners

import antlrparsers.cpp14._
import scala.collection.mutable.{MutableList => MList}
import fett.util.utils._

case class CPP14TraversalListener() extends CPP14BaseListener {
  private val preorder = MList[PreOrderNode]()
  private val postorder = MList[PostOrderNode]()

  private val preorder_functions = MList[List[PreOrderNode]]()
  private var inside_function = false
  private var node_were_waiting_to_exit = PreOrderNode(Symbol(""), Loc(-1, -1))
  private var start_index = -1

  def getPreOrder: List[PreOrderNode] = preorder.toList
  def getPostOrder: List[PostOrderNode] = postorder.toList
  def getPreOrderFunctions: List[List[PreOrderNode]] = preorder_functions.toList

  override def enterFunctiondefinition(ctx: CPP14Parser.FunctiondefinitionContext) { 
    if (!inside_function) {
      inside_function = true
      node_were_waiting_to_exit = PreOrderNode(Symbol("Functiondefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine()))
      start_index = preorder.size
    }

    preorder += PreOrderNode(Symbol("Functiondefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) 
  }
  override def exitFunctiondefinition(ctx: CPP14Parser.FunctiondefinitionContext) { 
    if (inside_function && node_were_waiting_to_exit == PreOrderNode(Symbol("Functiondefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine()))) {
      inside_function = false
      preorder_functions += preorder.drop(start_index).toList
    }

    postorder += PostOrderNode(Symbol("Functiondefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) 
  }

  import org.antlr.v4.runtime._
  import org.antlr.v4.runtime.tree._
  override def enterEveryRule(ctx: ParserRuleContext) { }
  override def exitEveryRule(ctx: ParserRuleContext) { }
  override def visitTerminal(node: TerminalNode) { }
  override def visitErrorNode(node: ErrorNode) { }

  override def enterTranslationunit(ctx: CPP14Parser.TranslationunitContext) { preorder += PreOrderNode(Symbol("Translationunit"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTranslationunit(ctx: CPP14Parser.TranslationunitContext) { postorder += PostOrderNode(Symbol("Translationunit"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterPrimaryexpression(ctx: CPP14Parser.PrimaryexpressionContext) { preorder += PreOrderNode(Symbol("Primaryexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitPrimaryexpression(ctx: CPP14Parser.PrimaryexpressionContext) { postorder += PostOrderNode(Symbol("Primaryexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterIdexpression(ctx: CPP14Parser.IdexpressionContext) { preorder += PreOrderNode(Symbol("Idexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitIdexpression(ctx: CPP14Parser.IdexpressionContext) { postorder += PostOrderNode(Symbol("Idexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterUnqualifiedid(ctx: CPP14Parser.UnqualifiedidContext) { preorder += PreOrderNode(Symbol("Unqualifiedid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitUnqualifiedid(ctx: CPP14Parser.UnqualifiedidContext) { postorder += PostOrderNode(Symbol("Unqualifiedid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterQualifiedid(ctx: CPP14Parser.QualifiedidContext) { preorder += PreOrderNode(Symbol("Qualifiedid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitQualifiedid(ctx: CPP14Parser.QualifiedidContext) { postorder += PostOrderNode(Symbol("Qualifiedid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNestednamespecifier(ctx: CPP14Parser.NestednamespecifierContext) { preorder += PreOrderNode(Symbol("Nestednamespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNestednamespecifier(ctx: CPP14Parser.NestednamespecifierContext) { postorder += PostOrderNode(Symbol("Nestednamespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterLambdaexpression(ctx: CPP14Parser.LambdaexpressionContext) { preorder += PreOrderNode(Symbol("Lambdaexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitLambdaexpression(ctx: CPP14Parser.LambdaexpressionContext) { postorder += PostOrderNode(Symbol("Lambdaexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterLambdaintroducer(ctx: CPP14Parser.LambdaintroducerContext) { preorder += PreOrderNode(Symbol("Lambdaintroducer"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitLambdaintroducer(ctx: CPP14Parser.LambdaintroducerContext) { postorder += PostOrderNode(Symbol("Lambdaintroducer"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterLambdacapture(ctx: CPP14Parser.LambdacaptureContext) { preorder += PreOrderNode(Symbol("Lambdacapture"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitLambdacapture(ctx: CPP14Parser.LambdacaptureContext) { postorder += PostOrderNode(Symbol("Lambdacapture"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterCapturedefault(ctx: CPP14Parser.CapturedefaultContext) { preorder += PreOrderNode(Symbol("Capturedefault"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitCapturedefault(ctx: CPP14Parser.CapturedefaultContext) { postorder += PostOrderNode(Symbol("Capturedefault"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterCapturelist(ctx: CPP14Parser.CapturelistContext) { preorder += PreOrderNode(Symbol("Capturelist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitCapturelist(ctx: CPP14Parser.CapturelistContext) { postorder += PostOrderNode(Symbol("Capturelist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterCapture(ctx: CPP14Parser.CaptureContext) { preorder += PreOrderNode(Symbol("Capture"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitCapture(ctx: CPP14Parser.CaptureContext) { postorder += PostOrderNode(Symbol("Capture"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterSimplecapture(ctx: CPP14Parser.SimplecaptureContext) { preorder += PreOrderNode(Symbol("Simplecapture"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitSimplecapture(ctx: CPP14Parser.SimplecaptureContext) { postorder += PostOrderNode(Symbol("Simplecapture"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterInitcapture(ctx: CPP14Parser.InitcaptureContext) { preorder += PreOrderNode(Symbol("Initcapture"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitInitcapture(ctx: CPP14Parser.InitcaptureContext) { postorder += PostOrderNode(Symbol("Initcapture"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterLambdadeclarator(ctx: CPP14Parser.LambdadeclaratorContext) { preorder += PreOrderNode(Symbol("Lambdadeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitLambdadeclarator(ctx: CPP14Parser.LambdadeclaratorContext) { postorder += PostOrderNode(Symbol("Lambdadeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterArrayAccess(ctx: CPP14Parser.ArrayAccessContext) { preorder += PreOrderNode(Symbol("ArrayAccess"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitArrayAccess(ctx: CPP14Parser.ArrayAccessContext) { postorder += PostOrderNode(Symbol("ArrayAccess"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterDontKnowWhatToPutHere(ctx: CPP14Parser.DontKnowWhatToPutHereContext) { preorder += PreOrderNode(Symbol("DontKnowWhatToPutHere"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitDontKnowWhatToPutHere(ctx: CPP14Parser.DontKnowWhatToPutHereContext) { postorder += PostOrderNode(Symbol("DontKnowWhatToPutHere"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterExpressionlist(ctx: CPP14Parser.ExpressionlistContext) { preorder += PreOrderNode(Symbol("Expressionlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitExpressionlist(ctx: CPP14Parser.ExpressionlistContext) { postorder += PostOrderNode(Symbol("Expressionlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterPseudodestructorname(ctx: CPP14Parser.PseudodestructornameContext) { preorder += PreOrderNode(Symbol("Pseudodestructorname"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitPseudodestructorname(ctx: CPP14Parser.PseudodestructornameContext) { postorder += PostOrderNode(Symbol("Pseudodestructorname"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterUnaryoperator(ctx: CPP14Parser.UnaryoperatorContext) { preorder += PreOrderNode(Symbol("Unaryoperator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitUnaryoperator(ctx: CPP14Parser.UnaryoperatorContext) { postorder += PostOrderNode(Symbol("Unaryoperator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNewexpression(ctx: CPP14Parser.NewexpressionContext) { preorder += PreOrderNode(Symbol("Newexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNewexpression(ctx: CPP14Parser.NewexpressionContext) { postorder += PostOrderNode(Symbol("Newexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNewplacement(ctx: CPP14Parser.NewplacementContext) { preorder += PreOrderNode(Symbol("Newplacement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNewplacement(ctx: CPP14Parser.NewplacementContext) { postorder += PostOrderNode(Symbol("Newplacement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNewtypeid(ctx: CPP14Parser.NewtypeidContext) { preorder += PreOrderNode(Symbol("Newtypeid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNewtypeid(ctx: CPP14Parser.NewtypeidContext) { postorder += PostOrderNode(Symbol("Newtypeid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNewdeclarator(ctx: CPP14Parser.NewdeclaratorContext) { preorder += PreOrderNode(Symbol("Newdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNewdeclarator(ctx: CPP14Parser.NewdeclaratorContext) { postorder += PostOrderNode(Symbol("Newdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNoptrnewdeclarator(ctx: CPP14Parser.NoptrnewdeclaratorContext) { preorder += PreOrderNode(Symbol("Noptrnewdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNoptrnewdeclarator(ctx: CPP14Parser.NoptrnewdeclaratorContext) { postorder += PostOrderNode(Symbol("Noptrnewdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNewinitializer(ctx: CPP14Parser.NewinitializerContext) { preorder += PreOrderNode(Symbol("Newinitializer"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNewinitializer(ctx: CPP14Parser.NewinitializerContext) { postorder += PostOrderNode(Symbol("Newinitializer"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterDeleteexpression(ctx: CPP14Parser.DeleteexpressionContext) { preorder += PreOrderNode(Symbol("Deleteexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitDeleteexpression(ctx: CPP14Parser.DeleteexpressionContext) { postorder += PostOrderNode(Symbol("Deleteexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNoexceptexpression(ctx: CPP14Parser.NoexceptexpressionContext) { preorder += PreOrderNode(Symbol("Noexceptexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNoexceptexpression(ctx: CPP14Parser.NoexceptexpressionContext) { postorder += PostOrderNode(Symbol("Noexceptexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterCastexpression(ctx: CPP14Parser.CastexpressionContext) { preorder += PreOrderNode(Symbol("Castexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitCastexpression(ctx: CPP14Parser.CastexpressionContext) { postorder += PostOrderNode(Symbol("Castexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterPmexpression(ctx: CPP14Parser.PmexpressionContext) { preorder += PreOrderNode(Symbol("Pmexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitPmexpression(ctx: CPP14Parser.PmexpressionContext) { postorder += PostOrderNode(Symbol("Pmexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterMultiplicativeexpression(ctx: CPP14Parser.MultiplicativeexpressionContext) { preorder += PreOrderNode(Symbol("Multiplicativeexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitMultiplicativeexpression(ctx: CPP14Parser.MultiplicativeexpressionContext) { postorder += PostOrderNode(Symbol("Multiplicativeexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAdditiveexpression(ctx: CPP14Parser.AdditiveexpressionContext) { preorder += PreOrderNode(Symbol("Additiveexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAdditiveexpression(ctx: CPP14Parser.AdditiveexpressionContext) { postorder += PostOrderNode(Symbol("Additiveexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterShiftexpression(ctx: CPP14Parser.ShiftexpressionContext) { preorder += PreOrderNode(Symbol("Shiftexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitShiftexpression(ctx: CPP14Parser.ShiftexpressionContext) { postorder += PostOrderNode(Symbol("Shiftexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterRelationalexpression(ctx: CPP14Parser.RelationalexpressionContext) { preorder += PreOrderNode(Symbol("Relationalexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitRelationalexpression(ctx: CPP14Parser.RelationalexpressionContext) { postorder += PostOrderNode(Symbol("Relationalexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterEqualityexpression(ctx: CPP14Parser.EqualityexpressionContext) { preorder += PreOrderNode(Symbol("Equalityexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitEqualityexpression(ctx: CPP14Parser.EqualityexpressionContext) { postorder += PostOrderNode(Symbol("Equalityexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAndexpression(ctx: CPP14Parser.AndexpressionContext) { preorder += PreOrderNode(Symbol("Andexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAndexpression(ctx: CPP14Parser.AndexpressionContext) { postorder += PostOrderNode(Symbol("Andexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterExclusiveorexpression(ctx: CPP14Parser.ExclusiveorexpressionContext) { preorder += PreOrderNode(Symbol("Exclusiveorexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitExclusiveorexpression(ctx: CPP14Parser.ExclusiveorexpressionContext) { postorder += PostOrderNode(Symbol("Exclusiveorexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterInclusiveorexpression(ctx: CPP14Parser.InclusiveorexpressionContext) { preorder += PreOrderNode(Symbol("Inclusiveorexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitInclusiveorexpression(ctx: CPP14Parser.InclusiveorexpressionContext) { postorder += PostOrderNode(Symbol("Inclusiveorexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterLogicalandexpression(ctx: CPP14Parser.LogicalandexpressionContext) { preorder += PreOrderNode(Symbol("Logicalandexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitLogicalandexpression(ctx: CPP14Parser.LogicalandexpressionContext) { postorder += PostOrderNode(Symbol("Logicalandexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterLogicalorexpression(ctx: CPP14Parser.LogicalorexpressionContext) { preorder += PreOrderNode(Symbol("Logicalorexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitLogicalorexpression(ctx: CPP14Parser.LogicalorexpressionContext) { postorder += PostOrderNode(Symbol("Logicalorexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterConditionalexpression(ctx: CPP14Parser.ConditionalexpressionContext) { preorder += PreOrderNode(Symbol("Conditionalexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitConditionalexpression(ctx: CPP14Parser.ConditionalexpressionContext) { postorder += PostOrderNode(Symbol("Conditionalexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAssignmentexpression(ctx: CPP14Parser.AssignmentexpressionContext) { preorder += PreOrderNode(Symbol("Assignmentexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAssignmentexpression(ctx: CPP14Parser.AssignmentexpressionContext) { postorder += PostOrderNode(Symbol("Assignmentexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAssignmentoperator(ctx: CPP14Parser.AssignmentoperatorContext) { preorder += PreOrderNode(Symbol("Assignmentoperator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAssignmentoperator(ctx: CPP14Parser.AssignmentoperatorContext) { postorder += PostOrderNode(Symbol("Assignmentoperator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterExpression(ctx: CPP14Parser.ExpressionContext) { preorder += PreOrderNode(Symbol("Expression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitExpression(ctx: CPP14Parser.ExpressionContext) { postorder += PostOrderNode(Symbol("Expression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterConstantexpression(ctx: CPP14Parser.ConstantexpressionContext) { preorder += PreOrderNode(Symbol("Constantexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitConstantexpression(ctx: CPP14Parser.ConstantexpressionContext) { postorder += PostOrderNode(Symbol("Constantexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterStatement(ctx: CPP14Parser.StatementContext) { preorder += PreOrderNode(Symbol("Statement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitStatement(ctx: CPP14Parser.StatementContext) { postorder += PostOrderNode(Symbol("Statement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterLabeledstatement(ctx: CPP14Parser.LabeledstatementContext) { preorder += PreOrderNode(Symbol("Labeledstatement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitLabeledstatement(ctx: CPP14Parser.LabeledstatementContext) { postorder += PostOrderNode(Symbol("Labeledstatement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterExpressionstatement(ctx: CPP14Parser.ExpressionstatementContext) { preorder += PreOrderNode(Symbol("Expressionstatement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitExpressionstatement(ctx: CPP14Parser.ExpressionstatementContext) { postorder += PostOrderNode(Symbol("Expressionstatement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterCompoundstatement(ctx: CPP14Parser.CompoundstatementContext) { preorder += PreOrderNode(Symbol("Compoundstatement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitCompoundstatement(ctx: CPP14Parser.CompoundstatementContext) { postorder += PostOrderNode(Symbol("Compoundstatement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterStatementseq(ctx: CPP14Parser.StatementseqContext) { preorder += PreOrderNode(Symbol("Statementseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitStatementseq(ctx: CPP14Parser.StatementseqContext) { postorder += PostOrderNode(Symbol("Statementseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterSelectionstatement(ctx: CPP14Parser.SelectionstatementContext) { preorder += PreOrderNode(Symbol("Selectionstatement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitSelectionstatement(ctx: CPP14Parser.SelectionstatementContext) { postorder += PostOrderNode(Symbol("Selectionstatement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterCondition(ctx: CPP14Parser.ConditionContext) { preorder += PreOrderNode(Symbol("Condition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitCondition(ctx: CPP14Parser.ConditionContext) { postorder += PostOrderNode(Symbol("Condition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterIterationstatement(ctx: CPP14Parser.IterationstatementContext) { preorder += PreOrderNode(Symbol("Iterationstatement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitIterationstatement(ctx: CPP14Parser.IterationstatementContext) { postorder += PostOrderNode(Symbol("Iterationstatement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterForinitstatement(ctx: CPP14Parser.ForinitstatementContext) { preorder += PreOrderNode(Symbol("Forinitstatement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitForinitstatement(ctx: CPP14Parser.ForinitstatementContext) { postorder += PostOrderNode(Symbol("Forinitstatement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterForrangedeclaration(ctx: CPP14Parser.ForrangedeclarationContext) { preorder += PreOrderNode(Symbol("Forrangedeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitForrangedeclaration(ctx: CPP14Parser.ForrangedeclarationContext) { postorder += PostOrderNode(Symbol("Forrangedeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterForrangeinitializer(ctx: CPP14Parser.ForrangeinitializerContext) { preorder += PreOrderNode(Symbol("Forrangeinitializer"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitForrangeinitializer(ctx: CPP14Parser.ForrangeinitializerContext) { postorder += PostOrderNode(Symbol("Forrangeinitializer"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterDeclarationstatement(ctx: CPP14Parser.DeclarationstatementContext) { preorder += PreOrderNode(Symbol("Declarationstatement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitDeclarationstatement(ctx: CPP14Parser.DeclarationstatementContext) { postorder += PostOrderNode(Symbol("Declarationstatement"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterDeclarationseq(ctx: CPP14Parser.DeclarationseqContext) { preorder += PreOrderNode(Symbol("Declarationseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitDeclarationseq(ctx: CPP14Parser.DeclarationseqContext) { postorder += PostOrderNode(Symbol("Declarationseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterDeclaration(ctx: CPP14Parser.DeclarationContext) { preorder += PreOrderNode(Symbol("Declaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitDeclaration(ctx: CPP14Parser.DeclarationContext) { postorder += PostOrderNode(Symbol("Declaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterBlockdeclaration(ctx: CPP14Parser.BlockdeclarationContext) { preorder += PreOrderNode(Symbol("Blockdeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitBlockdeclaration(ctx: CPP14Parser.BlockdeclarationContext) { postorder += PostOrderNode(Symbol("Blockdeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAliasdeclaration(ctx: CPP14Parser.AliasdeclarationContext) { preorder += PreOrderNode(Symbol("Aliasdeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAliasdeclaration(ctx: CPP14Parser.AliasdeclarationContext) { postorder += PostOrderNode(Symbol("Aliasdeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterSimpledeclaration(ctx: CPP14Parser.SimpledeclarationContext) { preorder += PreOrderNode(Symbol("Simpledeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitSimpledeclaration(ctx: CPP14Parser.SimpledeclarationContext) { postorder += PostOrderNode(Symbol("Simpledeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterStatic_assertdeclaration(ctx: CPP14Parser.Static_assertdeclarationContext) { preorder += PreOrderNode(Symbol("Static_assertdeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitStatic_assertdeclaration(ctx: CPP14Parser.Static_assertdeclarationContext) { postorder += PostOrderNode(Symbol("Static_assertdeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterEmptydeclaration(ctx: CPP14Parser.EmptydeclarationContext) { preorder += PreOrderNode(Symbol("Emptydeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitEmptydeclaration(ctx: CPP14Parser.EmptydeclarationContext) { postorder += PostOrderNode(Symbol("Emptydeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAttributedeclaration(ctx: CPP14Parser.AttributedeclarationContext) { preorder += PreOrderNode(Symbol("Attributedeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAttributedeclaration(ctx: CPP14Parser.AttributedeclarationContext) { postorder += PostOrderNode(Symbol("Attributedeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterDeclspecifier(ctx: CPP14Parser.DeclspecifierContext) { preorder += PreOrderNode(Symbol("Declspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitDeclspecifier(ctx: CPP14Parser.DeclspecifierContext) { postorder += PostOrderNode(Symbol("Declspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterDeclspecifierseq(ctx: CPP14Parser.DeclspecifierseqContext) { preorder += PreOrderNode(Symbol("Declspecifierseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitDeclspecifierseq(ctx: CPP14Parser.DeclspecifierseqContext) { postorder += PostOrderNode(Symbol("Declspecifierseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterStorageclassspecifier(ctx: CPP14Parser.StorageclassspecifierContext) { preorder += PreOrderNode(Symbol("Storageclassspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitStorageclassspecifier(ctx: CPP14Parser.StorageclassspecifierContext) { postorder += PostOrderNode(Symbol("Storageclassspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterFunctionspecifier(ctx: CPP14Parser.FunctionspecifierContext) { preorder += PreOrderNode(Symbol("Functionspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitFunctionspecifier(ctx: CPP14Parser.FunctionspecifierContext) { postorder += PostOrderNode(Symbol("Functionspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTypedefname(ctx: CPP14Parser.TypedefnameContext) { preorder += PreOrderNode(Symbol("Typedefname"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTypedefname(ctx: CPP14Parser.TypedefnameContext) { postorder += PostOrderNode(Symbol("Typedefname"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTypespecifier(ctx: CPP14Parser.TypespecifierContext) { preorder += PreOrderNode(Symbol("Typespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTypespecifier(ctx: CPP14Parser.TypespecifierContext) { postorder += PostOrderNode(Symbol("Typespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTrailingtypespecifier(ctx: CPP14Parser.TrailingtypespecifierContext) { preorder += PreOrderNode(Symbol("Trailingtypespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTrailingtypespecifier(ctx: CPP14Parser.TrailingtypespecifierContext) { postorder += PostOrderNode(Symbol("Trailingtypespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTypespecifierseq(ctx: CPP14Parser.TypespecifierseqContext) { preorder += PreOrderNode(Symbol("Typespecifierseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTypespecifierseq(ctx: CPP14Parser.TypespecifierseqContext) { postorder += PostOrderNode(Symbol("Typespecifierseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTrailingtypespecifierseq(ctx: CPP14Parser.TrailingtypespecifierseqContext) { preorder += PreOrderNode(Symbol("Trailingtypespecifierseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTrailingtypespecifierseq(ctx: CPP14Parser.TrailingtypespecifierseqContext) { postorder += PostOrderNode(Symbol("Trailingtypespecifierseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterSimpletypespecifier(ctx: CPP14Parser.SimpletypespecifierContext) { preorder += PreOrderNode(Symbol("Simpletypespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitSimpletypespecifier(ctx: CPP14Parser.SimpletypespecifierContext) { postorder += PostOrderNode(Symbol("Simpletypespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTypename(ctx: CPP14Parser.TypenameContext) { preorder += PreOrderNode(Symbol("Typename"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTypename(ctx: CPP14Parser.TypenameContext) { postorder += PostOrderNode(Symbol("Typename"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterDecltypespecifier(ctx: CPP14Parser.DecltypespecifierContext) { preorder += PreOrderNode(Symbol("Decltypespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitDecltypespecifier(ctx: CPP14Parser.DecltypespecifierContext) { postorder += PostOrderNode(Symbol("Decltypespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterElaboratedtypespecifier(ctx: CPP14Parser.ElaboratedtypespecifierContext) { preorder += PreOrderNode(Symbol("Elaboratedtypespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitElaboratedtypespecifier(ctx: CPP14Parser.ElaboratedtypespecifierContext) { postorder += PostOrderNode(Symbol("Elaboratedtypespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterEnumname(ctx: CPP14Parser.EnumnameContext) { preorder += PreOrderNode(Symbol("Enumname"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitEnumname(ctx: CPP14Parser.EnumnameContext) { postorder += PostOrderNode(Symbol("Enumname"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterEnumspecifier(ctx: CPP14Parser.EnumspecifierContext) { preorder += PreOrderNode(Symbol("Enumspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitEnumspecifier(ctx: CPP14Parser.EnumspecifierContext) { postorder += PostOrderNode(Symbol("Enumspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterEnumhead(ctx: CPP14Parser.EnumheadContext) { preorder += PreOrderNode(Symbol("Enumhead"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitEnumhead(ctx: CPP14Parser.EnumheadContext) { postorder += PostOrderNode(Symbol("Enumhead"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterOpaqueenumdeclaration(ctx: CPP14Parser.OpaqueenumdeclarationContext) { preorder += PreOrderNode(Symbol("Opaqueenumdeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitOpaqueenumdeclaration(ctx: CPP14Parser.OpaqueenumdeclarationContext) { postorder += PostOrderNode(Symbol("Opaqueenumdeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterEnumkey(ctx: CPP14Parser.EnumkeyContext) { preorder += PreOrderNode(Symbol("Enumkey"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitEnumkey(ctx: CPP14Parser.EnumkeyContext) { postorder += PostOrderNode(Symbol("Enumkey"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterEnumbase(ctx: CPP14Parser.EnumbaseContext) { preorder += PreOrderNode(Symbol("Enumbase"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitEnumbase(ctx: CPP14Parser.EnumbaseContext) { postorder += PostOrderNode(Symbol("Enumbase"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterEnumeratorlist(ctx: CPP14Parser.EnumeratorlistContext) { preorder += PreOrderNode(Symbol("Enumeratorlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitEnumeratorlist(ctx: CPP14Parser.EnumeratorlistContext) { postorder += PostOrderNode(Symbol("Enumeratorlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterEnumeratordefinition(ctx: CPP14Parser.EnumeratordefinitionContext) { preorder += PreOrderNode(Symbol("Enumeratordefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitEnumeratordefinition(ctx: CPP14Parser.EnumeratordefinitionContext) { postorder += PostOrderNode(Symbol("Enumeratordefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterEnumerator(ctx: CPP14Parser.EnumeratorContext) { preorder += PreOrderNode(Symbol("Enumerator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitEnumerator(ctx: CPP14Parser.EnumeratorContext) { postorder += PostOrderNode(Symbol("Enumerator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNamespacename(ctx: CPP14Parser.NamespacenameContext) { preorder += PreOrderNode(Symbol("Namespacename"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNamespacename(ctx: CPP14Parser.NamespacenameContext) { postorder += PostOrderNode(Symbol("Namespacename"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterOriginalnamespacename(ctx: CPP14Parser.OriginalnamespacenameContext) { preorder += PreOrderNode(Symbol("Originalnamespacename"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitOriginalnamespacename(ctx: CPP14Parser.OriginalnamespacenameContext) { postorder += PostOrderNode(Symbol("Originalnamespacename"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNamespacedefinition(ctx: CPP14Parser.NamespacedefinitionContext) { preorder += PreOrderNode(Symbol("Namespacedefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNamespacedefinition(ctx: CPP14Parser.NamespacedefinitionContext) { postorder += PostOrderNode(Symbol("Namespacedefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNamednamespacedefinition(ctx: CPP14Parser.NamednamespacedefinitionContext) { preorder += PreOrderNode(Symbol("Namednamespacedefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNamednamespacedefinition(ctx: CPP14Parser.NamednamespacedefinitionContext) { postorder += PostOrderNode(Symbol("Namednamespacedefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterOriginalnamespacedefinition(ctx: CPP14Parser.OriginalnamespacedefinitionContext) { preorder += PreOrderNode(Symbol("Originalnamespacedefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitOriginalnamespacedefinition(ctx: CPP14Parser.OriginalnamespacedefinitionContext) { postorder += PostOrderNode(Symbol("Originalnamespacedefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterExtensionnamespacedefinition(ctx: CPP14Parser.ExtensionnamespacedefinitionContext) { preorder += PreOrderNode(Symbol("Extensionnamespacedefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitExtensionnamespacedefinition(ctx: CPP14Parser.ExtensionnamespacedefinitionContext) { postorder += PostOrderNode(Symbol("Extensionnamespacedefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterUnnamednamespacedefinition(ctx: CPP14Parser.UnnamednamespacedefinitionContext) { preorder += PreOrderNode(Symbol("Unnamednamespacedefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitUnnamednamespacedefinition(ctx: CPP14Parser.UnnamednamespacedefinitionContext) { postorder += PostOrderNode(Symbol("Unnamednamespacedefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNamespacebody(ctx: CPP14Parser.NamespacebodyContext) { preorder += PreOrderNode(Symbol("Namespacebody"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNamespacebody(ctx: CPP14Parser.NamespacebodyContext) { postorder += PostOrderNode(Symbol("Namespacebody"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNamespacealias(ctx: CPP14Parser.NamespacealiasContext) { preorder += PreOrderNode(Symbol("Namespacealias"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNamespacealias(ctx: CPP14Parser.NamespacealiasContext) { postorder += PostOrderNode(Symbol("Namespacealias"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNamespacealiasdefinition(ctx: CPP14Parser.NamespacealiasdefinitionContext) { preorder += PreOrderNode(Symbol("Namespacealiasdefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNamespacealiasdefinition(ctx: CPP14Parser.NamespacealiasdefinitionContext) { postorder += PostOrderNode(Symbol("Namespacealiasdefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterQualifiednamespacespecifier(ctx: CPP14Parser.QualifiednamespacespecifierContext) { preorder += PreOrderNode(Symbol("Qualifiednamespacespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitQualifiednamespacespecifier(ctx: CPP14Parser.QualifiednamespacespecifierContext) { postorder += PostOrderNode(Symbol("Qualifiednamespacespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterUsingdeclaration(ctx: CPP14Parser.UsingdeclarationContext) { preorder += PreOrderNode(Symbol("Usingdeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitUsingdeclaration(ctx: CPP14Parser.UsingdeclarationContext) { postorder += PostOrderNode(Symbol("Usingdeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterUsingdirective(ctx: CPP14Parser.UsingdirectiveContext) { preorder += PreOrderNode(Symbol("Usingdirective"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitUsingdirective(ctx: CPP14Parser.UsingdirectiveContext) { postorder += PostOrderNode(Symbol("Usingdirective"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAsmdefinition(ctx: CPP14Parser.AsmdefinitionContext) { preorder += PreOrderNode(Symbol("Asmdefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAsmdefinition(ctx: CPP14Parser.AsmdefinitionContext) { postorder += PostOrderNode(Symbol("Asmdefinition"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterLinkagespecification(ctx: CPP14Parser.LinkagespecificationContext) { preorder += PreOrderNode(Symbol("Linkagespecification"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitLinkagespecification(ctx: CPP14Parser.LinkagespecificationContext) { postorder += PostOrderNode(Symbol("Linkagespecification"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAttributespecifierseq(ctx: CPP14Parser.AttributespecifierseqContext) { preorder += PreOrderNode(Symbol("Attributespecifierseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAttributespecifierseq(ctx: CPP14Parser.AttributespecifierseqContext) { postorder += PostOrderNode(Symbol("Attributespecifierseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAttributespecifier(ctx: CPP14Parser.AttributespecifierContext) { preorder += PreOrderNode(Symbol("Attributespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAttributespecifier(ctx: CPP14Parser.AttributespecifierContext) { postorder += PostOrderNode(Symbol("Attributespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAlignmentspecifier(ctx: CPP14Parser.AlignmentspecifierContext) { preorder += PreOrderNode(Symbol("Alignmentspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAlignmentspecifier(ctx: CPP14Parser.AlignmentspecifierContext) { postorder += PostOrderNode(Symbol("Alignmentspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAttributelist(ctx: CPP14Parser.AttributelistContext) { preorder += PreOrderNode(Symbol("Attributelist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAttributelist(ctx: CPP14Parser.AttributelistContext) { postorder += PostOrderNode(Symbol("Attributelist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAttribute(ctx: CPP14Parser.AttributeContext) { preorder += PreOrderNode(Symbol("Attribute"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAttribute(ctx: CPP14Parser.AttributeContext) { postorder += PostOrderNode(Symbol("Attribute"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAttributetoken(ctx: CPP14Parser.AttributetokenContext) { preorder += PreOrderNode(Symbol("Attributetoken"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAttributetoken(ctx: CPP14Parser.AttributetokenContext) { postorder += PostOrderNode(Symbol("Attributetoken"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAttributescopedtoken(ctx: CPP14Parser.AttributescopedtokenContext) { preorder += PreOrderNode(Symbol("Attributescopedtoken"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAttributescopedtoken(ctx: CPP14Parser.AttributescopedtokenContext) { postorder += PostOrderNode(Symbol("Attributescopedtoken"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAttributenamespace(ctx: CPP14Parser.AttributenamespaceContext) { preorder += PreOrderNode(Symbol("Attributenamespace"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAttributenamespace(ctx: CPP14Parser.AttributenamespaceContext) { postorder += PostOrderNode(Symbol("Attributenamespace"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAttributeargumentclause(ctx: CPP14Parser.AttributeargumentclauseContext) { preorder += PreOrderNode(Symbol("Attributeargumentclause"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAttributeargumentclause(ctx: CPP14Parser.AttributeargumentclauseContext) { postorder += PostOrderNode(Symbol("Attributeargumentclause"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterBalancedtokenseq(ctx: CPP14Parser.BalancedtokenseqContext) { preorder += PreOrderNode(Symbol("Balancedtokenseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitBalancedtokenseq(ctx: CPP14Parser.BalancedtokenseqContext) { postorder += PostOrderNode(Symbol("Balancedtokenseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterBalancedtoken(ctx: CPP14Parser.BalancedtokenContext) { preorder += PreOrderNode(Symbol("Balancedtoken"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitBalancedtoken(ctx: CPP14Parser.BalancedtokenContext) { postorder += PostOrderNode(Symbol("Balancedtoken"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterInitdeclaratorlist(ctx: CPP14Parser.InitdeclaratorlistContext) { preorder += PreOrderNode(Symbol("Initdeclaratorlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitInitdeclaratorlist(ctx: CPP14Parser.InitdeclaratorlistContext) { postorder += PostOrderNode(Symbol("Initdeclaratorlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterInitdeclarator(ctx: CPP14Parser.InitdeclaratorContext) { preorder += PreOrderNode(Symbol("Initdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitInitdeclarator(ctx: CPP14Parser.InitdeclaratorContext) { postorder += PostOrderNode(Symbol("Initdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterDeclarator(ctx: CPP14Parser.DeclaratorContext) { preorder += PreOrderNode(Symbol("Declarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitDeclarator(ctx: CPP14Parser.DeclaratorContext) { postorder += PostOrderNode(Symbol("Declarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterPtrdeclarator(ctx: CPP14Parser.PtrdeclaratorContext) { preorder += PreOrderNode(Symbol("Ptrdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitPtrdeclarator(ctx: CPP14Parser.PtrdeclaratorContext) { postorder += PostOrderNode(Symbol("Ptrdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNoptrdeclarator(ctx: CPP14Parser.NoptrdeclaratorContext) { preorder += PreOrderNode(Symbol("Noptrdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNoptrdeclarator(ctx: CPP14Parser.NoptrdeclaratorContext) { postorder += PostOrderNode(Symbol("Noptrdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterParametersandqualifiers(ctx: CPP14Parser.ParametersandqualifiersContext) { preorder += PreOrderNode(Symbol("Parametersandqualifiers"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitParametersandqualifiers(ctx: CPP14Parser.ParametersandqualifiersContext) { postorder += PostOrderNode(Symbol("Parametersandqualifiers"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTrailingreturntype(ctx: CPP14Parser.TrailingreturntypeContext) { preorder += PreOrderNode(Symbol("Trailingreturntype"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTrailingreturntype(ctx: CPP14Parser.TrailingreturntypeContext) { postorder += PostOrderNode(Symbol("Trailingreturntype"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterPtroperator(ctx: CPP14Parser.PtroperatorContext) { preorder += PreOrderNode(Symbol("Ptroperator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitPtroperator(ctx: CPP14Parser.PtroperatorContext) { postorder += PostOrderNode(Symbol("Ptroperator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterCvqualifierseq(ctx: CPP14Parser.CvqualifierseqContext) { preorder += PreOrderNode(Symbol("Cvqualifierseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitCvqualifierseq(ctx: CPP14Parser.CvqualifierseqContext) { postorder += PostOrderNode(Symbol("Cvqualifierseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterCvqualifier(ctx: CPP14Parser.CvqualifierContext) { preorder += PreOrderNode(Symbol("Cvqualifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitCvqualifier(ctx: CPP14Parser.CvqualifierContext) { postorder += PostOrderNode(Symbol("Cvqualifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterRefqualifier(ctx: CPP14Parser.RefqualifierContext) { preorder += PreOrderNode(Symbol("Refqualifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitRefqualifier(ctx: CPP14Parser.RefqualifierContext) { postorder += PostOrderNode(Symbol("Refqualifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterDeclaratorid(ctx: CPP14Parser.DeclaratoridContext) { preorder += PreOrderNode(Symbol("Declaratorid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitDeclaratorid(ctx: CPP14Parser.DeclaratoridContext) { postorder += PostOrderNode(Symbol("Declaratorid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTypeid(ctx: CPP14Parser.TypeidContext) { preorder += PreOrderNode(Symbol("Typeid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTypeid(ctx: CPP14Parser.TypeidContext) { postorder += PostOrderNode(Symbol("Typeid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAbstractdeclarator(ctx: CPP14Parser.AbstractdeclaratorContext) { preorder += PreOrderNode(Symbol("Abstractdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAbstractdeclarator(ctx: CPP14Parser.AbstractdeclaratorContext) { postorder += PostOrderNode(Symbol("Abstractdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterPtrabstractdeclarator(ctx: CPP14Parser.PtrabstractdeclaratorContext) { preorder += PreOrderNode(Symbol("Ptrabstractdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitPtrabstractdeclarator(ctx: CPP14Parser.PtrabstractdeclaratorContext) { postorder += PostOrderNode(Symbol("Ptrabstractdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNoptrabstractdeclarator(ctx: CPP14Parser.NoptrabstractdeclaratorContext) { preorder += PreOrderNode(Symbol("Noptrabstractdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNoptrabstractdeclarator(ctx: CPP14Parser.NoptrabstractdeclaratorContext) { postorder += PostOrderNode(Symbol("Noptrabstractdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAbstractpackdeclarator(ctx: CPP14Parser.AbstractpackdeclaratorContext) { preorder += PreOrderNode(Symbol("Abstractpackdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAbstractpackdeclarator(ctx: CPP14Parser.AbstractpackdeclaratorContext) { postorder += PostOrderNode(Symbol("Abstractpackdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNoptrabstractpackdeclarator(ctx: CPP14Parser.NoptrabstractpackdeclaratorContext) { preorder += PreOrderNode(Symbol("Noptrabstractpackdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNoptrabstractpackdeclarator(ctx: CPP14Parser.NoptrabstractpackdeclaratorContext) { postorder += PostOrderNode(Symbol("Noptrabstractpackdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterParameterdeclarationclause(ctx: CPP14Parser.ParameterdeclarationclauseContext) { preorder += PreOrderNode(Symbol("Parameterdeclarationclause"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitParameterdeclarationclause(ctx: CPP14Parser.ParameterdeclarationclauseContext) { postorder += PostOrderNode(Symbol("Parameterdeclarationclause"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterParameterdeclarationlist(ctx: CPP14Parser.ParameterdeclarationlistContext) { preorder += PreOrderNode(Symbol("Parameterdeclarationlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitParameterdeclarationlist(ctx: CPP14Parser.ParameterdeclarationlistContext) { postorder += PostOrderNode(Symbol("Parameterdeclarationlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterParameterdeclaration(ctx: CPP14Parser.ParameterdeclarationContext) { preorder += PreOrderNode(Symbol("Parameterdeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitParameterdeclaration(ctx: CPP14Parser.ParameterdeclarationContext) { postorder += PostOrderNode(Symbol("Parameterdeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterFunctionbody(ctx: CPP14Parser.FunctionbodyContext) { preorder += PreOrderNode(Symbol("Functionbody"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitFunctionbody(ctx: CPP14Parser.FunctionbodyContext) { postorder += PostOrderNode(Symbol("Functionbody"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterInitializer(ctx: CPP14Parser.InitializerContext) { preorder += PreOrderNode(Symbol("Initializer"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitInitializer(ctx: CPP14Parser.InitializerContext) { postorder += PostOrderNode(Symbol("Initializer"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterBraceorequalinitializer(ctx: CPP14Parser.BraceorequalinitializerContext) { preorder += PreOrderNode(Symbol("Braceorequalinitializer"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitBraceorequalinitializer(ctx: CPP14Parser.BraceorequalinitializerContext) { postorder += PostOrderNode(Symbol("Braceorequalinitializer"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterInitializerclause(ctx: CPP14Parser.InitializerclauseContext) { preorder += PreOrderNode(Symbol("Initializerclause"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitInitializerclause(ctx: CPP14Parser.InitializerclauseContext) { postorder += PostOrderNode(Symbol("Initializerclause"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterInitializerlist(ctx: CPP14Parser.InitializerlistContext) { preorder += PreOrderNode(Symbol("Initializerlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitInitializerlist(ctx: CPP14Parser.InitializerlistContext) { postorder += PostOrderNode(Symbol("Initializerlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterBracedinitlist(ctx: CPP14Parser.BracedinitlistContext) { preorder += PreOrderNode(Symbol("Bracedinitlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitBracedinitlist(ctx: CPP14Parser.BracedinitlistContext) { postorder += PostOrderNode(Symbol("Bracedinitlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterClassname(ctx: CPP14Parser.ClassnameContext) { preorder += PreOrderNode(Symbol("Classname"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitClassname(ctx: CPP14Parser.ClassnameContext) { postorder += PostOrderNode(Symbol("Classname"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterClassspecifier(ctx: CPP14Parser.ClassspecifierContext) { preorder += PreOrderNode(Symbol("Classspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitClassspecifier(ctx: CPP14Parser.ClassspecifierContext) { postorder += PostOrderNode(Symbol("Classspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterClasshead(ctx: CPP14Parser.ClassheadContext) { preorder += PreOrderNode(Symbol("Classhead"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitClasshead(ctx: CPP14Parser.ClassheadContext) { postorder += PostOrderNode(Symbol("Classhead"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterClassheadname(ctx: CPP14Parser.ClassheadnameContext) { preorder += PreOrderNode(Symbol("Classheadname"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitClassheadname(ctx: CPP14Parser.ClassheadnameContext) { postorder += PostOrderNode(Symbol("Classheadname"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterClassvirtspecifier(ctx: CPP14Parser.ClassvirtspecifierContext) { preorder += PreOrderNode(Symbol("Classvirtspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitClassvirtspecifier(ctx: CPP14Parser.ClassvirtspecifierContext) { postorder += PostOrderNode(Symbol("Classvirtspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterClasskey(ctx: CPP14Parser.ClasskeyContext) { preorder += PreOrderNode(Symbol("Classkey"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitClasskey(ctx: CPP14Parser.ClasskeyContext) { postorder += PostOrderNode(Symbol("Classkey"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterMemberspecification(ctx: CPP14Parser.MemberspecificationContext) { preorder += PreOrderNode(Symbol("Memberspecification"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitMemberspecification(ctx: CPP14Parser.MemberspecificationContext) { postorder += PostOrderNode(Symbol("Memberspecification"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterMemberdeclaration(ctx: CPP14Parser.MemberdeclarationContext) { preorder += PreOrderNode(Symbol("Memberdeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitMemberdeclaration(ctx: CPP14Parser.MemberdeclarationContext) { postorder += PostOrderNode(Symbol("Memberdeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterMemberdeclaratorlist(ctx: CPP14Parser.MemberdeclaratorlistContext) { preorder += PreOrderNode(Symbol("Memberdeclaratorlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitMemberdeclaratorlist(ctx: CPP14Parser.MemberdeclaratorlistContext) { postorder += PostOrderNode(Symbol("Memberdeclaratorlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterMemberdeclarator(ctx: CPP14Parser.MemberdeclaratorContext) { preorder += PreOrderNode(Symbol("Memberdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitMemberdeclarator(ctx: CPP14Parser.MemberdeclaratorContext) { postorder += PostOrderNode(Symbol("Memberdeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterVirtspecifierseq(ctx: CPP14Parser.VirtspecifierseqContext) { preorder += PreOrderNode(Symbol("Virtspecifierseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitVirtspecifierseq(ctx: CPP14Parser.VirtspecifierseqContext) { postorder += PostOrderNode(Symbol("Virtspecifierseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterVirtspecifier(ctx: CPP14Parser.VirtspecifierContext) { preorder += PreOrderNode(Symbol("Virtspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitVirtspecifier(ctx: CPP14Parser.VirtspecifierContext) { postorder += PostOrderNode(Symbol("Virtspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterPurespecifier(ctx: CPP14Parser.PurespecifierContext) { preorder += PreOrderNode(Symbol("Purespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitPurespecifier(ctx: CPP14Parser.PurespecifierContext) { postorder += PostOrderNode(Symbol("Purespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterBaseclause(ctx: CPP14Parser.BaseclauseContext) { preorder += PreOrderNode(Symbol("Baseclause"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitBaseclause(ctx: CPP14Parser.BaseclauseContext) { postorder += PostOrderNode(Symbol("Baseclause"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterBasespecifierlist(ctx: CPP14Parser.BasespecifierlistContext) { preorder += PreOrderNode(Symbol("Basespecifierlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitBasespecifierlist(ctx: CPP14Parser.BasespecifierlistContext) { postorder += PostOrderNode(Symbol("Basespecifierlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterBasespecifier(ctx: CPP14Parser.BasespecifierContext) { preorder += PreOrderNode(Symbol("Basespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitBasespecifier(ctx: CPP14Parser.BasespecifierContext) { postorder += PostOrderNode(Symbol("Basespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterClassordecltype(ctx: CPP14Parser.ClassordecltypeContext) { preorder += PreOrderNode(Symbol("Classordecltype"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitClassordecltype(ctx: CPP14Parser.ClassordecltypeContext) { postorder += PostOrderNode(Symbol("Classordecltype"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterBasetypespecifier(ctx: CPP14Parser.BasetypespecifierContext) { preorder += PreOrderNode(Symbol("Basetypespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitBasetypespecifier(ctx: CPP14Parser.BasetypespecifierContext) { postorder += PostOrderNode(Symbol("Basetypespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterAccessspecifier(ctx: CPP14Parser.AccessspecifierContext) { preorder += PreOrderNode(Symbol("Accessspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitAccessspecifier(ctx: CPP14Parser.AccessspecifierContext) { postorder += PostOrderNode(Symbol("Accessspecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterConversionfunctionid(ctx: CPP14Parser.ConversionfunctionidContext) { preorder += PreOrderNode(Symbol("Conversionfunctionid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitConversionfunctionid(ctx: CPP14Parser.ConversionfunctionidContext) { postorder += PostOrderNode(Symbol("Conversionfunctionid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterConversiontypeid(ctx: CPP14Parser.ConversiontypeidContext) { preorder += PreOrderNode(Symbol("Conversiontypeid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitConversiontypeid(ctx: CPP14Parser.ConversiontypeidContext) { postorder += PostOrderNode(Symbol("Conversiontypeid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterConversiondeclarator(ctx: CPP14Parser.ConversiondeclaratorContext) { preorder += PreOrderNode(Symbol("Conversiondeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitConversiondeclarator(ctx: CPP14Parser.ConversiondeclaratorContext) { postorder += PostOrderNode(Symbol("Conversiondeclarator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterCtorinitializer(ctx: CPP14Parser.CtorinitializerContext) { preorder += PreOrderNode(Symbol("Ctorinitializer"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitCtorinitializer(ctx: CPP14Parser.CtorinitializerContext) { postorder += PostOrderNode(Symbol("Ctorinitializer"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterMeminitializerlist(ctx: CPP14Parser.MeminitializerlistContext) { preorder += PreOrderNode(Symbol("Meminitializerlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitMeminitializerlist(ctx: CPP14Parser.MeminitializerlistContext) { postorder += PostOrderNode(Symbol("Meminitializerlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterMeminitializer(ctx: CPP14Parser.MeminitializerContext) { preorder += PreOrderNode(Symbol("Meminitializer"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitMeminitializer(ctx: CPP14Parser.MeminitializerContext) { postorder += PostOrderNode(Symbol("Meminitializer"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterMeminitializerid(ctx: CPP14Parser.MeminitializeridContext) { preorder += PreOrderNode(Symbol("Meminitializerid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitMeminitializerid(ctx: CPP14Parser.MeminitializeridContext) { postorder += PostOrderNode(Symbol("Meminitializerid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterOperatorfunctionid(ctx: CPP14Parser.OperatorfunctionidContext) { preorder += PreOrderNode(Symbol("Operatorfunctionid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitOperatorfunctionid(ctx: CPP14Parser.OperatorfunctionidContext) { postorder += PostOrderNode(Symbol("Operatorfunctionid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterLiteraloperatorid(ctx: CPP14Parser.LiteraloperatoridContext) { preorder += PreOrderNode(Symbol("Literaloperatorid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitLiteraloperatorid(ctx: CPP14Parser.LiteraloperatoridContext) { postorder += PostOrderNode(Symbol("Literaloperatorid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTemplatedeclaration(ctx: CPP14Parser.TemplatedeclarationContext) { preorder += PreOrderNode(Symbol("Templatedeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTemplatedeclaration(ctx: CPP14Parser.TemplatedeclarationContext) { postorder += PostOrderNode(Symbol("Templatedeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTemplateparameterlist(ctx: CPP14Parser.TemplateparameterlistContext) { preorder += PreOrderNode(Symbol("Templateparameterlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTemplateparameterlist(ctx: CPP14Parser.TemplateparameterlistContext) { postorder += PostOrderNode(Symbol("Templateparameterlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTemplateparameter(ctx: CPP14Parser.TemplateparameterContext) { preorder += PreOrderNode(Symbol("Templateparameter"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTemplateparameter(ctx: CPP14Parser.TemplateparameterContext) { postorder += PostOrderNode(Symbol("Templateparameter"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTypeparameter(ctx: CPP14Parser.TypeparameterContext) { preorder += PreOrderNode(Symbol("Typeparameter"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTypeparameter(ctx: CPP14Parser.TypeparameterContext) { postorder += PostOrderNode(Symbol("Typeparameter"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterSimpletemplateid(ctx: CPP14Parser.SimpletemplateidContext) { preorder += PreOrderNode(Symbol("Simpletemplateid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitSimpletemplateid(ctx: CPP14Parser.SimpletemplateidContext) { postorder += PostOrderNode(Symbol("Simpletemplateid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTemplateid(ctx: CPP14Parser.TemplateidContext) { preorder += PreOrderNode(Symbol("Templateid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTemplateid(ctx: CPP14Parser.TemplateidContext) { postorder += PostOrderNode(Symbol("Templateid"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTemplatename(ctx: CPP14Parser.TemplatenameContext) { preorder += PreOrderNode(Symbol("Templatename"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTemplatename(ctx: CPP14Parser.TemplatenameContext) { postorder += PostOrderNode(Symbol("Templatename"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTemplateargumentlist(ctx: CPP14Parser.TemplateargumentlistContext) { preorder += PreOrderNode(Symbol("Templateargumentlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTemplateargumentlist(ctx: CPP14Parser.TemplateargumentlistContext) { postorder += PostOrderNode(Symbol("Templateargumentlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTemplateargument(ctx: CPP14Parser.TemplateargumentContext) { preorder += PreOrderNode(Symbol("Templateargument"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTemplateargument(ctx: CPP14Parser.TemplateargumentContext) { postorder += PostOrderNode(Symbol("Templateargument"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTypenamespecifier(ctx: CPP14Parser.TypenamespecifierContext) { preorder += PreOrderNode(Symbol("Typenamespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTypenamespecifier(ctx: CPP14Parser.TypenamespecifierContext) { postorder += PostOrderNode(Symbol("Typenamespecifier"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterExplicitinstantiation(ctx: CPP14Parser.ExplicitinstantiationContext) { preorder += PreOrderNode(Symbol("Explicitinstantiation"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitExplicitinstantiation(ctx: CPP14Parser.ExplicitinstantiationContext) { postorder += PostOrderNode(Symbol("Explicitinstantiation"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterExplicitspecialization(ctx: CPP14Parser.ExplicitspecializationContext) { preorder += PreOrderNode(Symbol("Explicitspecialization"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitExplicitspecialization(ctx: CPP14Parser.ExplicitspecializationContext) { postorder += PostOrderNode(Symbol("Explicitspecialization"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTryblock(ctx: CPP14Parser.TryblockContext) { preorder += PreOrderNode(Symbol("Tryblock"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTryblock(ctx: CPP14Parser.TryblockContext) { postorder += PostOrderNode(Symbol("Tryblock"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterFunctiontryblock(ctx: CPP14Parser.FunctiontryblockContext) { preorder += PreOrderNode(Symbol("Functiontryblock"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitFunctiontryblock(ctx: CPP14Parser.FunctiontryblockContext) { postorder += PostOrderNode(Symbol("Functiontryblock"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterHandlerseq(ctx: CPP14Parser.HandlerseqContext) { preorder += PreOrderNode(Symbol("Handlerseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitHandlerseq(ctx: CPP14Parser.HandlerseqContext) { postorder += PostOrderNode(Symbol("Handlerseq"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterHandler(ctx: CPP14Parser.HandlerContext) { preorder += PreOrderNode(Symbol("Handler"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitHandler(ctx: CPP14Parser.HandlerContext) { postorder += PostOrderNode(Symbol("Handler"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterExceptiondeclaration(ctx: CPP14Parser.ExceptiondeclarationContext) { preorder += PreOrderNode(Symbol("Exceptiondeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitExceptiondeclaration(ctx: CPP14Parser.ExceptiondeclarationContext) { postorder += PostOrderNode(Symbol("Exceptiondeclaration"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterThrowexpression(ctx: CPP14Parser.ThrowexpressionContext) { preorder += PreOrderNode(Symbol("Throwexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitThrowexpression(ctx: CPP14Parser.ThrowexpressionContext) { postorder += PostOrderNode(Symbol("Throwexpression"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterExceptionspecification(ctx: CPP14Parser.ExceptionspecificationContext) { preorder += PreOrderNode(Symbol("Exceptionspecification"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitExceptionspecification(ctx: CPP14Parser.ExceptionspecificationContext) { postorder += PostOrderNode(Symbol("Exceptionspecification"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterDynamicexceptionspecification(ctx: CPP14Parser.DynamicexceptionspecificationContext) { preorder += PreOrderNode(Symbol("Dynamicexceptionspecification"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitDynamicexceptionspecification(ctx: CPP14Parser.DynamicexceptionspecificationContext) { postorder += PostOrderNode(Symbol("Dynamicexceptionspecification"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterTypeidlist(ctx: CPP14Parser.TypeidlistContext) { preorder += PreOrderNode(Symbol("Typeidlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitTypeidlist(ctx: CPP14Parser.TypeidlistContext) { postorder += PostOrderNode(Symbol("Typeidlist"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterNoexceptspecification(ctx: CPP14Parser.NoexceptspecificationContext) { preorder += PreOrderNode(Symbol("Noexceptspecification"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitNoexceptspecification(ctx: CPP14Parser.NoexceptspecificationContext) { postorder += PostOrderNode(Symbol("Noexceptspecification"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterRightShift(ctx: CPP14Parser.RightShiftContext) { preorder += PreOrderNode(Symbol("RightShift"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitRightShift(ctx: CPP14Parser.RightShiftContext) { postorder += PostOrderNode(Symbol("RightShift"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterRightShiftAssign(ctx: CPP14Parser.RightShiftAssignContext) { preorder += PreOrderNode(Symbol("RightShiftAssign"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitRightShiftAssign(ctx: CPP14Parser.RightShiftAssignContext) { postorder += PostOrderNode(Symbol("RightShiftAssign"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterOperator(ctx: CPP14Parser.OperatorContext) { preorder += PreOrderNode(Symbol("Operator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitOperator(ctx: CPP14Parser.OperatorContext) { postorder += PostOrderNode(Symbol("Operator"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterLiteral(ctx: CPP14Parser.LiteralContext) { preorder += PreOrderNode(Symbol("Literal"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitLiteral(ctx: CPP14Parser.LiteralContext) { postorder += PostOrderNode(Symbol("Literal"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterBooleanliteral(ctx: CPP14Parser.BooleanliteralContext) { preorder += PreOrderNode(Symbol("Booleanliteral"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitBooleanliteral(ctx: CPP14Parser.BooleanliteralContext) { postorder += PostOrderNode(Symbol("Booleanliteral"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterPointerliteral(ctx: CPP14Parser.PointerliteralContext) { preorder += PreOrderNode(Symbol("Pointerliteral"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitPointerliteral(ctx: CPP14Parser.PointerliteralContext) { postorder += PostOrderNode(Symbol("Pointerliteral"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def enterUserdefinedliteral(ctx: CPP14Parser.UserdefinedliteralContext) { preorder += PreOrderNode(Symbol("Userdefinedliteral"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
  override def exitUserdefinedliteral(ctx: CPP14Parser.UserdefinedliteralContext) { postorder += PostOrderNode(Symbol("Userdefinedliteral"), Loc(ctx.start.getLine(), ctx.start.getCharPositionInLine())) }
}
