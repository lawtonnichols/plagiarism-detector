{
    "1": ["cpp14.CPP14Parser$Additiveexpression", "ecmascript.ECMAScriptParser$AdditiveExpression", "java.JavaParser$AdditiveExpression", "golang.GolangParser$AdditiveExpression"],
    "2": ["cpp14.CPP14Parser$Multiplicativeexpression", "java.JavaParser$MultiplicativeExpression"],
    "3": ["cpp14.CPP14Parser$Literal", "java.JavaParser$Literal", "cpp14.CPP14Parser$Booleanliteral", "ecmascript.ECMAScriptParser$Literal", "ecmascript.ECMAScriptParser$NumericLiteral", "ecmascript.ECMAScriptParser$ObjectLiteral", "ecmascript.ECMAScriptParser$ArrayLiteral", "cpp14.CPP14Parser$Pointerliteral", "golang.GolangParser$BasicLit"],
    "4": ["cpp14.CPP14Parser$Logicalandexpression", "cpp14.CPP14Parser$Andexpression", "cpp14.CPP14Parser$Logicalorexpression", "ecmascript.ECMAScriptParser$LogicalOrExpression", "ecmascript.ECMAScriptParser$LogicalAndExpression", "java.JavaParser$LogicalAnd", "java.JavaParser$LogicalOr", "golang.GolangParser$LogicalAndOrExpression", "ecmascript.ECMAScriptParser$LogicalAndExpression", "ecmascript.ECMAScriptParser$LogicalOrExpression", "cpp14.CPP14Parser$Logicalandexpression", "cpp14.CPP14Parser$Logicalorexpression"],
    "not": ["java.JavaParser$BitwiseExpression", "ecmascript.ECMAScriptParser$BitNotExpression", "ecmascript.ECMAScriptParser$NotExpression"],
    "bitwise": ["ecmascript.ECMAScriptParser$BitAndExpression", "ecmascript.ECMAScriptParser$BitOrExpression", "ecmascript.ECMAScriptParser$BitXOrExpression", "java.JavaParser$BitwiseAnd", "java.JavaParser$BitwiseOr", "java.JavaParser$BitwiseXor"],
    "5": ["cpp14.CPP14Parser$Primaryexpression", "cpp14.CPP14Parser$Unqualifiedid", "golang.GolangParser$OperandName", "java.JavaParser$Primary", "java.JavaParser$IdentifierNonterminal", "java.JavaParser$VariableDeclaratorId", "ecmascript.ECMAScriptParser$IdentifierExpression", "ecmascript.ECMAScriptParser$IdentifierNonterminal", "ecmascript.ECMAScriptParser$IdentifierName", "golang.GolangParser$QualifiedIdent"],
    //"6": ["cpp14.CPP14Parser$Assignmentexpression", "ecmascript.ECMAScriptParser$AssignmentExpression", "ecmascript.ECMAScriptParser$AssignmentOperatorExpression", "golang.GolangParser$Assignment", "java.JavaParser$AssignExpression"],
    "loop": ["java.JavaParser$ForLoop", "cpp14.CPP14Parser$Iterationstatement", "ecmascript.ECMAScriptParser$ForVarStatement", "golang.GolangParser$ForStmt", "ecmascript.ECMAScriptParser$WhileStatement", "java.JavaParser$WhileLoop", "java.JavaParser$DoWhileLoop"],
    "8": ["ecmascript.ECMAScriptParser$AssignmentOperator", "cpp14.CPP14Parser$Assignmentoperator"],
    "assign": ["ecmascript.ECMAScriptParser$VariableStatement", "cpp14.CPP14Parser$Simpledeclaration",  "java.JavaParser$VariableDeclarator", "java.JavaParser$LocalVariableDeclaration", "cpp14.CPP14Parser$Initdeclarator", "golang.GolangParser$ShortVarDecl",
          "cpp14.CPP14Parser$Assignmentexpression", "cpp14.CPP14Parser$MeminitializerContext", "ecmascript.ECMAScriptParser$AssignmentExpression", "ecmascript.ECMAScriptParser$AssignmentOperatorExpression", "golang.GolangParser$Assignment", "java.JavaParser$AssignExpression"],
    "10": ["cpp14.CPP14Parser$Handler", "java.JavaParser$CatchClause"],
    "11": ["cpp14.CPP14Parser$Break", "golang.GolangParser$BreakStmt", "java.JavaParser$BreakStatement", "java.JavaParser$ContinueStatement", "golang.GolangParser$ContinueStmt", "cpp14.CPP14Parser$Continue", "cpp14.CPP14Parser$Goto"],
    "return": ["cpp14.CPP14Parser$Return", "ecmascript.ECMAScriptParser$ReturnStatement", "golang.GolangParser$ReturnStmt", "java.JavaParser$ReturnStatement"],
    "13": ["ecmascript.ECMAScriptParser$TryStatement", "cpp14.CPP14Parser$Tryblock", "java.JavaParser$Try"],
    "conditional": ["ecmascript.ECMAScriptParser$TernaryExpression", "java.JavaParser$TernaryExpression", "cpp14.CPP14Parser$Selectionstatement", "ecmascript.ECMAScriptParser$IfStatement", "golang.GolangParser$IfStmt", "java.JavaParser$IfStatement", "java.JavaParser$Switch", "cpp14.CPP14Parser$Conditionalexpression"],
    "functioncall": ["java.JavaParser$FunctionCall", "cpp14.CPP14Parser$FunctionCall", "golang.GolangParser$FunctionCall", "ecmascript.ECMAScriptParser$ArgumentsExpression"],
    "16": ["ecmascript.ECMAScriptParser$MemberIndexExpression", "cpp14.CPP14Parser$ArrayAccess", "golang.GolangParser$ArrayAccess", "java.JavaParser$ArrayAccess", "golang.GolangParser$Slice"],
    "17": ["cpp14.CPP14Parser$ArrowAccess", "cpp14.CPP14Parser$DotAccess", "java.JavaParser$DotExpression", "golang.GolangParser$DotAccess", "ecmascript.ECMAScriptParser$MemberDotExpression", "ecmascript.ECMAScriptParser$MemberIndexExpression"],
    "18": ["cpp14.CPP14Parser$Equalityexpression", "ecmascript.ECMAScriptParser$EqualityExpression", "golang.GolangParser$EqualityExpression", "java.JavaParser$EqualityExpression"],
    "19": ["cpp14.CPP14Parser$Functiondefinition", "ecmascript.ECMAScriptParser$FunctionDeclaration", "ecmascript.ECMAScriptParser$FunctionExpression", "golang.GolangParser$Function", "java.JavaParser$GenericMethodDeclaration", "java.JavaParser$MethodDeclaration", "java.JavaParser$ConstructorDeclaration", "java.JavaParser$GenericConstructorDeclaration", "cpp14.CPP14Parser$Lambdaexpression"],
    "20": ["cpp14.CPP14Parser$Relationalexpression", "ecmascript.ECMAScriptParser$RelationalExpression", "golang.GolangParser$RelationalExpression", "java.JavaParser$RelationalExpression"],
    "21": ["cpp14.CPP14Parser$Shiftexpression", "golang.GolangParser$ShiftExpression", "java.JavaParser$ShiftExpression", "ecmascript.ECMAScriptParser$BitShiftExpression"],
    "22": ["golang.GolangParser$UnaryExpr", "ecmascript.ECMAScriptParser$UnaryExpression", "java.JavaParser$PrefixIncDecNegPlus", "java.JavaParser$BitWiseExpression", "java.JavaParser$PostfixIncDec", "cpp14.CPP14Parser$UnaryOperation"],
    "23": ["ecmascript.ECMAScriptParser$ThrowStatement", "java.JavaParser$ThrowStatement", "cpp14.CPP14Parser$Throwexpression"],
    "weights": {"conditional": 5, "loop": 5, "return": 5, "functioncall": 5, "assign": 2}
}
