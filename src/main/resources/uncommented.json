{
    "useless": [],
    "arrayaccess": ["cpp14.CPP14Parser$ArrayAccess", "golang.GolangParser$ArrayAccess", "java.JavaParser$ArrayAccess", "ecmascript.ECMAScriptParser$MemberIndexExpression"],
    "funcall": ["cpp14.CPP14Parser$FunctionCall", "cpp14.CPP14Parser$ConstructorCall", "golang.GolangParser$FunctionCall", "java.JavaParser$FunctionCall", "ecmascript.ECMAScriptParser$ArgumentsExpression"],
    "memberaccess": ["cpp14.CPP14Parser$DotAccess", "cpp14.CPP14Parser$ArrowAccess", "golang.GolangParser$DotAccess", "java.JavaParser$DotExpression", "ecmascript.ECMAScriptParser$MemberDotExpression"],
    "increment": ["cpp14.CPP14Parser$PostfixIncDec", "cpp14.CPP14Parser$PrefixIncDec", "java.JavaParser$PostfixIncDec", "java.JavaParser$PrefixIncDecNegPlus", "ecmascript.ECMAScriptParser$PreIncrementExpression", "ecmascript.ECMAScriptParser$PreDecreaseExpression", "ecmascript.ECMAScriptParser$PostIncrementExpression", "ecmascript.ECMAScriptParser$PostDecreaseExpression"],
    "bitwiseexpr": ["cpp14.CPP14Parser$Andexpression", "cpp14.CPP14Parser$Exclusiveorexpression", "cpp14.CPP14Parser$Inclusiveorexpression", "golang.GolangParser$BitwiseExpression", "java.JavaParser$BitWiseExpression", "ecmascript.ECMAScriptParser$UnaryPlusExpression", "ecmascript.ECMAScriptParser$UnaryMinusExpression", "cpp14.CPP14Parser$UnaryOperation", "java.JavaParser$BitwiseAnd", "java.JavaParser$BitwiseXor", "java.JavaParser$BitwiseOr", "ecmascript.ECMAScriptParser$BitNotExpression", "ecmascript.ECMAScriptParser$NotExpression", "ecmascript.ECMAScriptParser$BitAndExpression", "ecmascript.ECMAScriptParser$BitXOrExpression", "ecmascript.ECMAScriptParser$BitOrExpression"],
    "shiftexpr": ["ecmascript.ECMAScriptParser$BitShiftExpression", "cpp14.CPP14Parser$Shiftexpression", "golang.GolangParser$ShiftExpression", "java.JavaParser$ShiftExpression"],
    "ret": ["cpp14.CPP14Parser$Return", "golang.GolangParser$ReturnStmt", "java.JavaParser$ReturnStatement", "ecmascript.ECMAScriptParser$ReturnStatement"],
    "logical": ["java.JavaParser$LogicalAnd", "java.JavaParser$LogicalOr", "golang.GolangParser$LogicalAndOrExpression", "cpp14.CPP14Parser$Logicalorexpression", "cpp14.CPP14Parser$Logicalandexpression", "ecmascript.ECMAScriptParser$LogicalAndExpression", "ecmascript.ECMAScriptParser$LogicalOrExpression"],
    "multiplicative": ["cpp14.CPP14Parser$Multiplicativeexpression", "golang.GolangParser$MultiplicativeExpression", "java.JavaParser$MultiplicativeExpression", "ecmascript.ECMAScriptParser$MultiplicativeExpression"],
    "additive": ["cpp14.CPP14Parser$Additiveexpression", "golang.GolangParser$AdditiveExpression", "java.JavaParser$AdditiveExpression", "ecmascript.ECMAScriptParser$AdditiveExpression"],
    "relational": ["cpp14.CPP14Parser$Relationalexpression", "golang.GolangParser$RelationalExpression", "java.JavaParser$RelationalExpression", "ecmascript.ECMAScriptParser$RelationalExpression"],
    "equality": ["cpp14.CPP14Parser$Equalityexpression", "golang.GolangParser$EqualityExpression", "java.JavaParser$EqualityExpression", "ecmascript.ECMAScriptParser$EqualityExpression"],
    "literalAndIdentifer": ["cpp14.CPP14Parser$Literal", "cpp14.CPP14Parser$Unqualifiedid", "cpp14.CPP14Parser$Classname", "cpp14.CPP14Parser$Booleanliteral", "cpp14.CPP14Parser$Pointerliteral", "golang.GolangParser$BasicLit", "golang.GolangParser$OperandName", "java.JavaParser$Literal", "java.JavaParser$Primary", "java.JavaParser$VariableDeclaratorId", "ecmascript.ECMAScriptParser$NumericLiteral", "ecmascript.ECMAScriptParser$ThisExpression", "ecmascript.ECMAScriptParser$IdentifierName", "ecmascript.ECMAScriptParser$Literal", "ecmascript.ECMAScriptParser$IdentifierExpression"]
}
