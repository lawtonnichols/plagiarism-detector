{
    "useless":
    ["cpp14.CPP14Parser$Templatedeclaration",
     "cpp14.CPP14Parser$Templatename",
     "cpp14.CPP14Parser$Simpletemplateid",
     "golang.GolangParser$SourceFile",
     "java.JavaParser$CompilationUnit",
     "cpp14.CPP14Parser$Storageclassspecifier",
     "cpp14.CPP14Parser$Expression",
     "cpp14.CPP14Parser$Declarationseq",
     "cpp14.CPP14Parser$Declspecifierseq",
     "cpp14.CPP14Parser$Ptroperator",
     "cpp14.CPP14Parser$Statementseq",
     "ecmascript.ECMAScriptParser$Eos",
     "java.JavaParser$Block"],
    "weights": {"conditionals": 5, "return": 3, "while": 5, "for": 5, "loops": 5, "funcall": 3},
    "additives":
    ["cpp14.CPP14Parser$Additiveexpression",
     "ecmascript.ECMAScriptParser$AdditiveExpression",
     "java.JavaParser$AdditiveExpression",
     "golang.GolangParser$AdditiveExpression"],
    "conditionals":
    ["ecmascript.ECMAScriptParser$IfStatement",
     "golang.GolangParser$IfStmt",
     "java.JavaParser$IfStatement"],
    "types":
    ["golang.GolangParser$TypeName",
     "java.JavaParser$TypeParameter",
     "cpp14.CPP14Parser$Typeid",
     "cpp14.CPP14Parser$Typeparameter"],
    "equality":
    ["cpp14.CPP14Parser$Equalityexpression",
     "ecmascript.ECMAScriptParser$EqualityExpression",
     "golang.GolangParser$EqualityExpression",
     "java.JavaParser$EqualityExpression"],
    "relational":
    ["cpp14.CPP14Parser$Relationalexpression",
     "ecmascript.ECMAScriptParser$RelationalExpression",
     "golang.GolangParser$RelationalExpression",
     "java.JavaParser$RelationalExpression"],
    "return":
    ["cpp14.CPP14Parser$Return",
     "ecmascript.ECMAScriptParser$ReturnStatement",
     "golang.GolangParser$ReturnStmt",
     "java.JavaParser$ReturnStatement"],
    "while": 
    ["ecmascript.ECMAScriptParser$WhileStatement",
     "java.JavaParser$ForControl",
     "java.JavaParser$ForLoop"],
    "for": 
    ["ecmascript.ECMAScriptParser$ForInStatement",
     "ecmascript.ECMAScriptParser$ForVarStatement"],
    "literals":
    ["cpp14.CPP14Parser$Literal",
     "cpp14.CPP14Parser$Booleanliteral",
     "ecmascript.ECMAScriptParser$Literal",
     "java.JavaParser$Literal",
     "golang.GolangParser$BasicLit",
     "ecmascript.ECMAScriptParser$NumericLiteral",
     "cpp14.CPP14Parser$Pointerliteral",
     "ecmascript.ECMAScriptParser$ObjectLiteral", 
     "ecmascript.ECMAScriptParser$ArrayLiteral"],
    "arrayaccess":
    ["cpp14.CPP14Parser$ArrayAccess",
     "ecmascript.ECMAScriptParser$MemberIndexExpression",
     "golang.GolangParser$ArrayAccess",
     "golang.GolangParser$Slice",
     "java.JavaParser$ArrayAccess"],
    "memberaccess":
    ["cpp14.CPP14Parser$ArrowAccess",
     "cpp14.CPP14Parser$DotAccess",
     "golang.GolangParser$DotAccess",
     "ecmascript.ECMAScriptParser$MemberDotExpression",
     "java.JavaParser$DotExpression"],
    "assignment":
    ["cpp14.CPP14Parser$Assignmentexpression",
     "cpp14.CPP14Parser$Assignmentoperator",
     "ecmascript.ECMAScriptParser$AssignmentOperator",
     "ecmascript.ECMAScriptParser$AssignmentExpression",
     "golang.GolangParser$Assignment",
     "java.JavaParser$AssignExpression"],
    "arraycreation":
    ["java.JavaParser$ArrayCreatorRest"],
    "typedecl":
    ["java.JavaParser$TypeDeclaration"],
    "paramlist":
    ["cpp14.CPP14Parser$Parameterdeclarationlist",
     "java.JavaParser$FormalParameterList",
     "golang.GolangParser$ParameterList",
     "ecmascript.ECMAScriptParser$FormalParameterList"],
    "param":
    ["java.JavaParser$FormalParameter",
     "golang.GolangParser$ParameterDecl",
     "cpp14.CPP14Parser$Parameterdeclaration"],
    "funs":
    ["cpp14.CPP14Parser$Functiondefinition",
     "cpp14.CPP14Parser$Lambdaexpression",
     "ecmascript.ECMAScriptParser$FunctionDeclaration",
     "ecmascript.ECMAScriptParser$FunctionExpression",
     "golang.GolangParser$Function",
     "java.JavaParser$GenericMethodDeclaration",
     "java.JavaParser$MethodDeclaration",
     "java.JavaParser$ConstructorDeclaration",
     "java.JavaParser$GenericConstructorDeclaration"],
    "multiplicatives":
    ["cpp14.CPP14Parser$Multiplicativeexpression",
     "ecmascript.ECMAScriptParser$MultiplicativeExpression",
     "golang.GolangParser$MultiplicativeExpression",
     "java.JavaParser$MultiplicativeExpression"],
    "vardeclarations":
    ["cpp14.CPP14Parser$Simpledeclaration",
     "ecmascript.ECMAScriptParser$VariableStatement",
     "golang.GolangParser$ShortVarDecl",
     "java.JavaParser$LocalVariableDeclaration"],
    "declarators":
    ["cpp14.CPP14Parser$Initdeclarator",
     "cpp14.CPP14Parser$Ptrdeclarator",
     "cpp14.CPP14Parser$Noptrdeclarator",
     "java.JavaParser$VariableDeclarator",
     "cpp14.CPP14Parser$Memberdeclarator",
     "cpp14.CPP14Parser$Meminitializer"], 
    "identifier":
    ["cpp14.CPP14Parser$Primaryexpression",
     "ecmascript.ECMAScriptParser$IdentifierExpression",
     "ecmascript.ECMAScriptParser$IdentifierName",
     "ecmascript.ECMAScriptParser$ThisExpression",
     "golang.GolangParser$QualifiedIdent",
     "golang.GolangParser$OperandName",
     "java.JavaParser$VariableDeclaratorId",
     "java.JavaParser$Identifier",
     "java.JavaParser$Primary"],
    "funcall":
    ["cpp14.CPP14Parser$FunctionCall",
     "ecmascript.ECMAScriptParser$ArgumentsExpression",
     "golang.GolangParser$FunctionCall",
     "java.JavaParser$FunctionCall"],
    "new":
    ["cpp14.CPP14Parser$Newexpression",
     "ecmascript.ECMAScriptParser$NewExpression",
     "java.JavaParser$Creator"],
    "args":
    ["cpp14.CPP14Parser$Newinitializer"],
    "exprlist":
    ["java.JavaParser$ExpressionList",
     "golang.GolangParser$ExpressionList",
     "ecmascript.ECMAScriptParser$ArgumentList", 
     "ecmascript.ECMAScriptParser$Arguments"], 
    "loops":
    ["cpp14.CPP14Parser$Iterationstatement",
     "ecmascript.ECMAScriptParser$ForVarStatement",
     "golang.GolangParser$ForStmt",
     "java.JavaParser$ForLoop",
     "ecmascript.ECMAScriptParser$WhileStatement",
     "java.JavaParser$WhileLoop",
     "java.JavaParser$DoWhileLoop"],
    "fields":
    ["cpp14.CPP14Parser$Memberdeclaration",
     "java.JavaParser$FieldDeclaration",
     "cpp14.CPP14Parser$Memberspecification"],
    "decllists":
    ["cpp14.CPP14Parser$Initializerlist",
     "cpp14.CPP14Parser$Meminitializerlist"],
    "throws":
    ["ecmascript.ECMAScriptParser$ThrowStatement",
     "java.JavaParser$ThrowStatement",
     "cpp14.CPP14Parser$Throwexpression"],
    "unary":
    ["golang.GolangParser$UnaryExpr",
     "ecmascript.ECMAScriptParser$UnaryExpression",
     "java.JavaParser$PrefixIncDecNegPlus",
     "java.JavaParser$BitWiseExpression",
     "java.JavaParser$PostfixIncDec",
     "cpp14.CPP14Parser$UnaryOperation"],
    "shifts":
    ["cpp14.CPP14Parser$Shiftexpression",
     "golang.GolangParser$ShiftExpression",
     "java.JavaParser$ShiftExpression",
     "ecmascript.ECMAScriptParser$BitShiftExpression"],
    "controlFlow":
    ["cpp14.CPP14Parser$Break",
     "golang.GolangParser$BreakStmt",
     "java.JavaParser$BreakStatement",
     "java.JavaParser$ContinueStatement",
     "golang.GolangParser$ContinueStmt",
     "cpp14.CPP14Parser$Continue",
     "cpp14.CPP14Parser$Goto"],
    "conditionals":
    ["cpp14.CPP14Parser$Conditionalexpression",
     "ecmascript.ECMAScriptParser$TernaryExpression",
     "java.JavaParser$TernaryExpression",
     "ecmascript.ECMAScriptParser$IfStatement",
     "golang.GolangParser$IfStmt",
     "java.JavaParser$IfStatement"],
    "switch":
    ["cpp14.CPP14Parser$Selectionstatement",
     "java.JavaParser$Switch"],
    "logical":
    ["cpp14.CPP14Parser$Logicalandexpression",
     "cpp14.CPP14Parser$Andexpression",
     "cpp14.CPP14Parser$Logicalorexpression",
     "ecmascript.ECMAScriptParser$LogicalOrExpression",
     "ecmascript.ECMAScriptParser$LogicalAndExpression",
     "java.JavaParser$LogicalAnd",
     "java.JavaParser$LogicalOr",
     "golang.GolangParser$LogicalAndOrExpression",
     "ecmascript.ECMAScriptParser$LogicalAndExpression",
     "ecmascript.ECMAScriptParser$LogicalOrExpression",
     "cpp14.CPP14Parser$Logicalandexpression",
     "cpp14.CPP14Parser$Logicalorexpression"],
    "try":
    ["ecmascript.ECMAScriptParser$TryStatement",
     "cpp14.CPP14Parser$Tryblock",
     "java.JavaParser$Try"],
    "catch":
    ["cpp14.CPP14Parser$Handler",
     "java.JavaParser$CatchClause"]
}
